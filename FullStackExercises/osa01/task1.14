import React, { useState } from 'react';

const App = () => {
  const anecdotes = [
    'If it hurts, do it more often.',
    'Adding manpower to a late software project makes it later!',
    'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',
    'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',
    'Premature optimization is the root of all evil.',
    'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.',
    'Programming without an extremely heavy use of console.log is same as if a doctor would refuse to use x-rays or blood tests when diagnosing patients.',
    'The only way to go fast, is to go well.'
  ];

  const [votes, setVotes] = useState(Array(anecdotes.length).fill(0));
  const [selected, setSelected] = useState(0);

  const handleRandomClick = () => {
    let randomIndex = Math.floor(Math.random() * anecdotes.length);
    // Ensure new index is different from the current one to avoid selecting the same anecdote
    while (randomIndex === selected) {
      randomIndex = Math.floor(Math.random() * anecdotes.length);
    }
    setSelected(randomIndex);
  };

  const handleVoteClick = () => {
    const newVotes = [...votes]; // Make a shallow copy of the votes array
    newVotes[selected] += 1; // Increment the vote for the currently selected anecdote
    setVotes(newVotes); // Update the state with the new votes array
  };

  const maxVotes = Math.max(...votes); // Find the maximum vote count
  const maxVotesIndexes = votes.reduce((indexes, currentVote, index) => {
    if (currentVote === maxVotes) {
      indexes.push(index);
    }
    return indexes;
  }, []); // Find all indexes with the maximum vote count

  return (
    <div>
      <div>
        {anecdotes[selected]}
        <br />
        has {votes[selected]} votes
      </div>
      <button onClick={handleVoteClick}>Vote</button>
      <button onClick={handleRandomClick}>Next anecdote</button>

      <h2>Anecdote{maxVotesIndexes.length > 1 ? 's' : ''} with the most votes</h2>
      {maxVotes === 0 ? (
        <p>No votes yet.</p>
      ) : (
        maxVotesIndexes.map((index) => (
          <div key={index}>
            {anecdotes[index]}
            <br />
            has {votes[index]} votes
          </div>
        ))
      )}
    </div>
  );
};

export default App;
